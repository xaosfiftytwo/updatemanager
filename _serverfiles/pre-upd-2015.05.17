#!/bin/bash

# Debug mode (set to true or false)
DEBUG=false

# --force-yes is deprecated in stretch
FORCE='--force-yes'
VER=$(head -c 1 /etc/debian_version | sed 's/[a-zA-Z]/0/' 2>/dev/null || echo 0)
if [ "$VER" -eq 0 ] || [ "$VER" -gt 8 ]; then
  FORCE='--allow-downgrades --allow-remove-essential --allow-change-held-packages'
fi

# Get the current release: solydx32, solydx64, solydk32, solydk64, solydkbo64, solydkbe64, solydxbe64
RELEASE=$(cat /etc/solydxk/info | grep EDITION= | cut -d'=' -f2)

BITS=$(uname -m)
echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\tRelease: $RELEASE $BITS"


# Check if a package is installed
PCKINSTALLED=false
function pck_isinstalled {
    PCKINST=$(dpkg-query -l $1 | grep ^i)
    if [ "${PCKINST:0:1}" == "i" ]; then
	PCKINSTALLED=true
    else
	PCKINSTALLED=false
    fi
}

# Function to install a given package
# Parameters:
# 1. package name
# 2. action: install, reinstall, purge, remove, forceremove, forceinstall
# 3. distribution: all, solydx32, solydx64, solydk32, solydk64, solydkbo64, solydkbe64, solydxbe64
function handle_pck {
    PCK=$1
    ACTION=$2
    DISTRO=$3
    CONTINUE=true
    
    if [ "$DISTRO" != "all" ] && [ "$DISTRO" != "$RELEASE" ]; then
        echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\tdo not $ACTION $PCK on $RELEASE ($DISTRO only)"
        CONTINUE=false
    fi

    if $CONTINUE; then
	pck_isinstalled $PCK
	if ! $PCKINSTALLED; then
	    if [ "$ACTION" != "install" ] && [ "$ACTION" != "forceinstall" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\t$ACTION not needed, $PCK not installed"
		CONTINUE=false
	    fi
	    PCKINST=$PCK
	else
	    if [ "$ACTION" == "install" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\t$ACTION not needed, $PCK already installed"
		CONTINUE=false
	    fi
	fi
	
	if $CONTINUE; then
	    if [ "$ACTION" == "forceremove" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\tdpkg --force-remove-reinstreq -P $PCK"
		if ! $DEBUG; then
		    dpkg --force-remove-reinstreq -P $PCK
		fi
	    else
		if [ "$ACTION" == "reinstall" ]; then
		    ACTION="install --reinstall"
		elif [ "$ACTION" == "forceinstall" ]; then
		    ACTION="install --reinstall -o Dpkg::Options::=--force-overwrite"
		fi
		
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\tapt-get $ACTION $PCK"
		if ! $DEBUG; then
		    apt-get $ACTION --assume-yes -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold $FORCE $PCK
		fi
	    fi
	fi
    fi
}

# Function to handle a given configuration file
# Parameters:
# 1. full path to configuration file
# 2. option name (before "=")
# 3. optional: option value (after "=")
# 4. optional: string to add option and value after (on a new line)
# When (3) is left empty, (2) will be simply appended to the configuration file
function handle_cnf {
    CNF=$1
    OPT=$2
    VAL=''
    if [ ! -z $3 ]; then
        VAL=$3
    fi
    APPAFTER=''
    if [ ! -z $4 ]; then
        APPAFTER=$4
    fi
    
    LINE=$OPT
    if [ "$VAL" != "" ]; then
        LINE="$OPT=$VAL"
    fi
    
    ESCOPT=${OPT//\[/\\[}
    ESCOPT=${ESCOPT//\]/\\]}
    ESCOPT=${ESCOPT//\//\\/}
        
    if [ -e $CNF ]; then
	if grep -Fq $OPT $CNF; then
	    if [ "$OPT" != "$LINE" ]; then
		echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\t$CNF : replace $OPT with $LINE"
		if ! $DEBUG; then
		    sed -i "s/$ESCOPT/$LINE/" $CNF
		fi
	    fi
	else
	    if [ "$APPAFTER" == "" ]; then
	        echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\tAppend $LINE to $CNF"
	        if ! $DEBUG; then
		    echo >> $CNF
		    echo -e "$LINE" >> $CNF
		fi
	    else
	        echo -e "$(date +%Y/%m/%d\ %H:%M:%S)\tPre-update script\tDEBUG\tAppend $LINE after $APPAFTER in $CNF"
	        if ! $DEBUG; then
	            sed -i "\'/\$APPAFTER/a \$LINE\'" $CNF
	        fi
	    fi
	fi
    fi
}

# Function to prevent a package from updating
function hold_pck {
  if [ ! -z $1 ]; then
    echo "$1 hold" | dpkg --set-selections
  fi
}

# Function to remove the hold on a package
function unhold_pck {
  if [ ! -z $1 ]; then
    echo "$1 install" | dpkg --set-selections
  fi
}

# Function to seed debconf answers
function preseed {
  if [ ! -z "$1" ]; then
    echo "$1" | debconf-set-selections
  fi
}

# Function to divert file
function divert {
  if [ -f "$1" ]; then
    DIVERTS=$(env LANG=C dpkg-divert --list | grep $1)
    if [ "$DIVERTS" == "" ]; then
      dpkg-divert --add --rename --divert $1.divert $1
    fi
  fi
}

# Function to remove a divert
function remove_divert {
  if [ ! -z "$1" ]; then
    DIVERTS=$(env LANG=C dpkg-divert --list | grep $1 | awk '{print $3}')
    for DIVERT in $DIVERTS; do
      sudo dpkg-divert --rename --remove $DIVERT
      # Sometimes it's forbidden to rename diverts
      CHKDIVERT=$(env LANG=C dpkg-divert --list | grep $DIVERT | awk '{print $3}')
      if [ "$CHKDIVERT" != "" ]; then
        sudo dpkg-divert --remove $DIVERT
      fi
    done
  fi
}

# ==============================================================
# Configure pre upgrade commands below
# ==============================================================
# ==============================================================
ufw allow CIFS